import { ChevronCell, Column, Id } from '@silevis/reactgrid';
import { BPRow, RowCells, RowPair } from '..';
import { HorizontalChevronCell } from '../../cell-templates/horizontalChevronCellTemplate/HorizontalChevronCellTemplate';
import { BPColumn } from './columns';
export declare const getChevronCell: (row: BPRow) => ChevronCell;
export declare const getExpandedRows: (rows: BPRow[]) => BPRow[];
export declare const fillCellMatrixHorizontally: (rows: BPRow[]) => BPRow[];
export declare const resetAggregatedMonthFields: (row: BPRow) => void;
export declare const fillCellMatrixVertically: (rows: BPRow[]) => void;
export declare const collectRowPairs: (rows: BPRow[]) => RowPair[];
export declare const getDirectChildrenRows: (rows: BPRow[], parentRow: BPRow) => BPRow[];
export declare const getParentRow: (rows: BPRow[], row: BPRow) => BPRow | undefined;
export declare const getDataFromRows: (rows: BPRow[]) => BPRow[];
export declare const createIndents: (rows: BPRow[]) => BPRow[];
export declare const isHorizontalChevronCell: (cell: RowCells) => boolean;
export declare const extendWithColIds: (row: BPRow, columns: BPColumn[]) => BPRow;
export declare const getDataFromColumns: (columns: Column[]) => Column[];
export declare const getHorizontalChevronCell: (cells: RowCells[], columnId: Id) => HorizontalChevronCell | undefined;
export declare const getParentCell: (cells: RowCells[], cell: RowCells) => HorizontalChevronCell | undefined;
export declare const getDirectChildrenColumns: (rows: BPRow[], parentRow: BPRow) => BPRow[];
export declare const isCellFullyExpanded: (cells: RowCells[], cell: RowCells) => boolean;
export declare const getExpandedCells: (cells: RowCells[]) => RowCells[];
export declare const getColumnsIdsxToRender: (cells: RowCells[], columnsToRender: BPColumn[]) => number[];
export declare const filterCellsOnRows: (rows: BPRow[], visibleColsIdxs: number[]) => {
    cells: RowCells[];
    rowId: import("@silevis/reactgrid/core").Id;
    height?: number | undefined;
    reorderable?: boolean | undefined;
}[];
